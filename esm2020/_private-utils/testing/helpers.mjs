import { TestBed } from '@angular/core/testing';
import { By } from '@angular/platform-browser';
import { extendObject } from '@ngbracket/ngx-layout/_private-utils';
/**
 * Function generator that captures a Component Type accessor and enables
 * `createTestComponent()` to be reusable for *any* captured Component class.
 */
export function makeCreateTestComponent(getClass) {
    let componentAny;
    // Return actual `createTestComponent()` function
    return function createTestComponent(template, styles) {
        if (!componentAny) {
            // Defer access to Component class to enable metadata to be configured properly...
            componentAny = getClass();
        }
        return TestBed.overrideComponent(componentAny, {
            set: {
                template: template,
                styles: styles || [],
            },
        }).createComponent(componentAny);
    };
}
/**
 *
 */
export function expectNativeEl(fixture, instanceOptions) {
    extendObject(fixture.componentInstance, instanceOptions || {});
    fixture.detectChanges();
    return expect(fixture.debugElement.children[0].nativeElement);
}
/**
 *
 */
export function expectEl(debugEl) {
    return expect(debugEl.nativeElement);
}
export function queryFor(fixture, selector) {
    return fixture.debugElement.queryAll(By.css(selector));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYnMvZmxleC1sYXlvdXQvX3ByaXZhdGUtdXRpbHMvdGVzdGluZy9oZWxwZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBLE9BQU8sRUFBb0IsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbEUsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUlwRTs7O0dBR0c7QUFDSCxNQUFNLFVBQVUsdUJBQXVCLENBQUMsUUFBMEI7SUFDaEUsSUFBSSxZQUF1QixDQUFDO0lBRTVCLGlEQUFpRDtJQUNqRCxPQUFPLFNBQVMsbUJBQW1CLENBQ2pDLFFBQWdCLEVBQ2hCLE1BQVk7UUFFWixJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ2pCLGtGQUFrRjtZQUNsRixZQUFZLEdBQUcsUUFBUSxFQUFFLENBQUM7U0FDM0I7UUFDRCxPQUFPLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUU7WUFDN0MsR0FBRyxFQUFFO2dCQUNILFFBQVEsRUFBRSxRQUFRO2dCQUNsQixNQUFNLEVBQUUsTUFBTSxJQUFJLEVBQUU7YUFDckI7U0FDRixDQUFDLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ25DLENBQUMsQ0FBQztBQUNKLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxjQUFjLENBQzVCLE9BQThCLEVBQzlCLGVBQXFCO0lBRXJCLFlBQVksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsZUFBZSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQy9ELE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN4QixPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUNoRSxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsUUFBUSxDQUFDLE9BQXFCO0lBQzVDLE9BQU8sTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN2QyxDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FDdEIsT0FBOEIsRUFDOUIsUUFBZ0I7SUFFaEIsT0FBTyxPQUFPLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFDekQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgRGVidWdFbGVtZW50LCBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21wb25lbnRGaXh0dXJlLCBUZXN0QmVkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcbmltcG9ydCB7IEJ5IH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBleHRlbmRPYmplY3QgfSBmcm9tICdAbmdicmFja2V0L25neC1sYXlvdXQvX3ByaXZhdGUtdXRpbHMnO1xuXG5leHBvcnQgdHlwZSBDb21wb25lbnRDbGF6ekZuID0gKCkgPT4gVHlwZTxhbnk+O1xuXG4vKipcbiAqIEZ1bmN0aW9uIGdlbmVyYXRvciB0aGF0IGNhcHR1cmVzIGEgQ29tcG9uZW50IFR5cGUgYWNjZXNzb3IgYW5kIGVuYWJsZXNcbiAqIGBjcmVhdGVUZXN0Q29tcG9uZW50KClgIHRvIGJlIHJldXNhYmxlIGZvciAqYW55KiBjYXB0dXJlZCBDb21wb25lbnQgY2xhc3MuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlQ3JlYXRlVGVzdENvbXBvbmVudChnZXRDbGFzczogQ29tcG9uZW50Q2xhenpGbikge1xuICBsZXQgY29tcG9uZW50QW55OiBUeXBlPGFueT47XG5cbiAgLy8gUmV0dXJuIGFjdHVhbCBgY3JlYXRlVGVzdENvbXBvbmVudCgpYCBmdW5jdGlvblxuICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlVGVzdENvbXBvbmVudChcbiAgICB0ZW1wbGF0ZTogc3RyaW5nLFxuICAgIHN0eWxlcz86IGFueVxuICApOiBDb21wb25lbnRGaXh0dXJlPFR5cGU8YW55Pj4ge1xuICAgIGlmICghY29tcG9uZW50QW55KSB7XG4gICAgICAvLyBEZWZlciBhY2Nlc3MgdG8gQ29tcG9uZW50IGNsYXNzIHRvIGVuYWJsZSBtZXRhZGF0YSB0byBiZSBjb25maWd1cmVkIHByb3Blcmx5Li4uXG4gICAgICBjb21wb25lbnRBbnkgPSBnZXRDbGFzcygpO1xuICAgIH1cbiAgICByZXR1cm4gVGVzdEJlZC5vdmVycmlkZUNvbXBvbmVudChjb21wb25lbnRBbnksIHtcbiAgICAgIHNldDoge1xuICAgICAgICB0ZW1wbGF0ZTogdGVtcGxhdGUsXG4gICAgICAgIHN0eWxlczogc3R5bGVzIHx8IFtdLFxuICAgICAgfSxcbiAgICB9KS5jcmVhdGVDb21wb25lbnQoY29tcG9uZW50QW55KTtcbiAgfTtcbn1cblxuLyoqXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhwZWN0TmF0aXZlRWwoXG4gIGZpeHR1cmU6IENvbXBvbmVudEZpeHR1cmU8YW55PixcbiAgaW5zdGFuY2VPcHRpb25zPzogYW55XG4pOiBhbnkge1xuICBleHRlbmRPYmplY3QoZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZSwgaW5zdGFuY2VPcHRpb25zIHx8IHt9KTtcbiAgZml4dHVyZS5kZXRlY3RDaGFuZ2VzKCk7XG4gIHJldHVybiBleHBlY3QoZml4dHVyZS5kZWJ1Z0VsZW1lbnQuY2hpbGRyZW5bMF0ubmF0aXZlRWxlbWVudCk7XG59XG5cbi8qKlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4cGVjdEVsKGRlYnVnRWw6IERlYnVnRWxlbWVudCk6IGFueSB7XG4gIHJldHVybiBleHBlY3QoZGVidWdFbC5uYXRpdmVFbGVtZW50KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5Rm9yKFxuICBmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPGFueT4sXG4gIHNlbGVjdG9yOiBzdHJpbmdcbik6IERlYnVnRWxlbWVudFtdIHtcbiAgcmV0dXJuIGZpeHR1cmUuZGVidWdFbGVtZW50LnF1ZXJ5QWxsKEJ5LmNzcyhzZWxlY3RvcikpO1xufVxuIl19